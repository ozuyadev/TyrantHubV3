-- Load Zypher UI Library
local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/teppyboy/RbxScripts/master/Misc/UI_Libraries/Zypher/Library.lua"))()

-- Create main UI
local main = library:CreateMain({
    projName = "Tyrant Hub",
    Resizable = true,
    MinSize = UDim2.new(0, 400, 0, 400),
    MaxSize = UDim2.new(0, 750, 0, 500),
})

-- Categories and Sections
local catchingCategory = main:CreateCategory("Catching")
local playerCategory = main:CreateCategory("Player")
local miscCategory = main:CreateCategory("Misc")

local catchingSection = catchingCategory:CreateSection("Catching Features")
local playerSection = playerCategory:CreateSection("Player Features")
local miscSection = miscCategory:CreateSection("Misc Features")

-- Catching features variables
local magnetEnabled = false
local magnetActivated = false
local magnetSize = 10
local magnetDelayEnabled = false
local magnetDelay = 0.1
local magnetRange = 35
local magnetSmoothSpeed = 5

-- Function to handle the Solara module loading with debug
local function loadSolaraModule()
    local solara = game:GetService("ReplicatedStorage"):WaitForChild("Solara", 5) -- Wait for up to 5 seconds
    if not solara then
        warn("Solara module not found in ReplicatedStorage.")
        for _, v in ipairs(game:GetService("ReplicatedStorage"):GetChildren()) do
            print("Found in ReplicatedStorage: " .. v.Name)
        end
        return nil -- Handle the absence of Solara
    end
    print("Solara module loaded successfully.")
    return solara
end

-- Attempt to load Solara module
local SolaraModule = loadSolaraModule()

-- Catching Features UI
catchingSection:Create("Toggle", "Magnets", function(state)
    magnetEnabled = state
end, { default = false })

catchingSection:Create("Slider", "Magnet Size", function(value)
    magnetSize = value
end, { min = 1, max = 35, default = 10 })

catchingSection:Create("Toggle", "Magnets Delay", function(state)
    magnetDelayEnabled = state
end, { default = false })

catchingSection:Create("Slider", "Magnet Delay", function(value)
    magnetDelay = value
end, { min = 0, max = 1, default = 0.1 })

catchingSection:Create("Slider", "Magnet Smooth Speed", function(value)
    magnetSmoothSpeed = value
end, { min = 1, max = 10, default = 5 })

-- Magnet activation on click
local UIS = game:GetService("UserInputService")
UIS.InputBegan:Connect(function(input, gameProcessed)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        magnetActivated = magnetEnabled
    end
end)

UIS.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        magnetActivated = false
    end
end)

game:GetService("RunService").Stepped:Connect(function()
    if magnetActivated and magnetEnabled then
        for _, child in ipairs(workspace:GetChildren()) do
            if child.Name == "Football" and child:IsA("BasePart") then
                if magnetDelayEnabled then
                    wait(magnetDelay)
                end

                local playerHRP = game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                if playerHRP then
                    local ballPosition = child.Position
                    local targetPosition = playerHRP.Position + Vector3.new(0, 3, 0) -- Adjusted for better alignment
                    local direction = (targetPosition - ballPosition).unit
                    local distance = (targetPosition - ballPosition).magnitude

                    if distance < magnetRange then
                        local smoothDistance = math.min(distance, magnetSmoothSpeed)
                        child.CFrame = CFrame.new(ballPosition + direction * smoothDistance, targetPosition)
                        child.Size = Vector3.new(magnetSize, magnetSize, magnetSize)
                        child.CanCollide = false
                    else
                        child.Size = Vector3.new(0.85, 1.2, 0.85)
                        child.CanCollide = false
                    end
                end
            end
        end
    end
end)

-- Player Features UI
local walkspeedEnabled = false
local jumpPowerEnabled = false
local walkspeedValue = 20
local jumpPowerValue = 50

playerSection:Create("Toggle", "Walkspeed", function(state)
    walkspeedEnabled = state
    local humanoid = game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.WalkSpeed = state and walkspeedValue or 16
    end
end, { default = false })

playerSection:Create("Slider", "Walkspeed Value", function(value)
    walkspeedValue = value
    local humanoid = game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
    if walkspeedEnabled and humanoid then
        humanoid.WalkSpeed = walkspeedValue
    end
end, { min = 20, max = 23, default = 20 })

playerSection:Create("Toggle", "JumpPower", function(state)
    jumpPowerEnabled = state
    local humanoid = game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.JumpPower = state and jumpPowerValue or 50
    end
end, { default = false })

playerSection:Create("Slider", "JumpPower Value", function(value)
    jumpPowerValue = value
    local humanoid = game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
    if jumpPowerEnabled and humanoid then
        humanoid.JumpPower = jumpPowerValue
    end
end, { min = 50, max = 60, default = 50 })

-- Misc Features UI
local ballLandingPredictionEnabled = false
local predictionColor = Color3.fromRGB(255, 255, 255)

-- Function to draw ball trajectory prediction
local function drawPrediction()
    local function beamProjectile(g, v0, x0, t1)
        local c = 0.5 * 0.5 * 0.5
        local p3 = 0.5 * g * t1 * t1 + v0 * t1 + x0
        local p2 = p3 - (g * t1 * t1 + v0 * t1) / 3
        local p1 = (c * g * t1 * t1 + 0.5 * v0 * t1 + x0 - c * (x0 + p3)) / (3 * c) - p2

        local curve0 = (p1 - x0).magnitude
        local curve1 = (p2 - p3).magnitude

        local b = (x0 - p3).unit
        local r1 = (p1 - x0).unit
        local u1 = r1:Cross(b).unit
        local r2 = (p2 - p3).unit
        local u2 = r2:Cross(b).unit
        b = u1:Cross(r1).unit

        local cf1 = CFrame.new(x0.x, x0.y, x0.z, r1.x, u1.x, b.x, r1.y, u1.y, b.y, r1.z, u1.z, b.z)
        local cf2 = CFrame.new(p1.x, p1.y, p1.z, r2.x, u2.x, b.x, r2.y, u2.y, b.y, r2.z, u2.z, b.z)
        local cf3 = CFrame.new(p2.x, p2.y, p2.z, r2.x, u2.x, b.x, r2.y, u2.y, b.y, r2.z, u2.z, b.z)

        return cf1, cf2, cf3
    end

    local function onBallAdded(ball)
        if ball:IsA("BasePart") and ball.Name == "Football" then
            local b = ball
            local x0 = b.Position
            local v0 = (b.Velocity / b.Mass) * 10
            local g = workspace.Gravity
            local t1 = 4

            local cf1, cf2, cf3 = beamProjectile(g, v0, x0, t1)
            local ballLine = Instance.new("Beam")
            ballLine.Color = ColorSequence.new(predictionColor)
            ballLine.Transparency = NumberSequence.new(0.5)
            ballLine.Width0 = 0.1
            ballLine.Width1 = 0.1
            ballLine.Attachment0 = Instance.new("Attachment", b)
            ballLine.Attachment1 = Instance.new("Attachment", b)
            ballLine.Attachment0.Position = Vector3.new(0, 0, 0)
            ballLine.Attachment1.Position = Vector3.new(0, 0, 0)
        end
    end

    game:GetService("Workspace").ChildAdded:Connect(onBallAdded)
end

miscSection:Create("Toggle", "Ball Prediction", function(state)
    ballLandingPredictionEnabled = state
    if state then
        drawPrediction()
    end
end, { default = false })

miscSection:Create("ColorPicker", "Prediction Color", function(color)
    predictionColor = color
end, { default = Color3.fromRGB(255, 255, 255) })
