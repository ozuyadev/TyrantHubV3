-- Load Zypher UI Library
local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/GhostDuckyy/UI-Libraries/main/Zypher/source.lua"))()
print(library)  -- Debug: Check if library is loaded

if not library then
    error("Failed to load Zypher UI Library")
end

-- Create Main UI Window
local success, main = pcall(function()
    return library:CreateMain({
        projName = "Tyrant Hub",
        Resizable = true,
        MinSize = UDim2.new(0, 400, 0, 400),
        MaxSize = UDim2.new(0, 750, 0, 500),
    })
end)

if not success then
    error("Failed to create main UI window: " .. main)
end

-- Create Tabs and Sections
local catchingCategory = main:CreateCategory("Catching")
local catchingSection = catchingCategory:CreateSection("Magnets")

local playerCategory = main:CreateCategory("Player")
local playerSection = playerCategory:CreateSection("Player Settings")

-- Initialize Variables
local Workspace = game:GetService("Workspace")
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:FindFirstChildOfClass("Humanoid")

-- Initialize Variables for Magnets
local magson = false
local range = 10
local delayon = false
local delay = 0.1

-- Function to Handle Magnets
local function handleMagnets()
    Workspace.ChildAdded:Connect(function(child)
        if child.Name == "Football" and child:IsA("BasePart") then
            if magson then
                if delayon then
                    wait(delay)
                end
                child.Size = Vector3.new(range, range, range)
                child.CanCollide = false
            else
                child.Size = Vector3.new(0.85, 1.2, 0.85)
                child.CanCollide = true
            end
        end
    end)
end

-- Add UI Elements for Magnets
local successToggle, errToggle = pcall(function()
    catchingSection:Create("Toggle", "Magnets", function(state)
        magson = state
        handleMagnets()
    end, { default = false })
end)

if not successToggle then
    error("Failed to create Magnets toggle: " .. errToggle)
end

local successSliderRange, errSliderRange = pcall(function()
    catchingSection:Create("Slider", "Range", function(value)
        range = value
    end, { min = 1, max = 25, default = 10, increment = 1, valueName = "Range" })
end)

if not successSliderRange then
    error("Failed to create Range slider: " .. errSliderRange)
end

local successToggleDelay, errToggleDelay = pcall(function()
    catchingSection:Create("Toggle", "Magnets Delay", function(state)
        delayon = state
    end, { default = false })
end)

if not successToggleDelay then
    error("Failed to create Magnets Delay toggle: " .. errToggleDelay)
end

local successSliderDelay, errSliderDelay = pcall(function()
    catchingSection:Create("Slider", "Delay", function(value)
        delay = value
    end, { min = 0, max = 1, default = 0.1, increment = 0.1, valueName = "Delay" })
end)

if not successSliderDelay then
    error("Failed to create Delay slider: " .. errSliderDelay)
end

-- Add UI Elements for Player Settings
local successToggleJump, errToggleJump = pcall(function()
    playerSection:Create("Toggle", "JumpPower", function(state)
        if state then
            humanoid.JumpPower = humanoid.JumpPower
        else
            humanoid.JumpPower = 50
        end
    end, { default = false })
end)

if not successToggleJump then
    error("Failed to create JumpPower toggle: " .. errToggleJump)
end

local successSliderJump, errSliderJump = pcall(function()
    playerSection:Create("Slider", "JumpPower", function(value)
        if humanoid then
            humanoid.JumpPower = value
        end
    end, { min = 50, max = 60, default = 50, increment = 1, valueName = "JumpPower" })
end)

if not successSliderJump then
    error("Failed to create JumpPower slider: " .. errSliderJump)
end

local successToggleWalk, errToggleWalk = pcall(function()
    playerSection:Create("Toggle", "WalkSpeed", function(state)
        if state then
            humanoid.WalkSpeed = humanoid.WalkSpeed
        else
            humanoid.WalkSpeed = 20
        end
    end, { default = false })
end)

if not successToggleWalk then
    error("Failed to create WalkSpeed toggle: " .. errToggleWalk)
end

local successSliderWalk, errSliderWalk = pcall(function()
    playerSection:Create("Slider", "WalkSpeed", function(value)
        if humanoid then
            humanoid.WalkSpeed = value
        end
    end, { min = 20, max = 23, default = 20, increment = 1, valueName = "WalkSpeed" })
end)

if not successSliderWalk then
    error("Failed to create WalkSpeed slider: " .. errSliderWalk)
end
