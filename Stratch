-- Load Zypher UI Library
local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/GhostDuckyy/UI-Libraries/main/Zypher/source.lua"))()
print(library)  -- Debug: Check if library is loaded

if not library then
    error("Failed to load Zypher UI Library")
end

-- Create Main UI Window
local success, main = pcall(function()
    return library:CreateMain({
        projName = "Tyrant Hub",
        Resizable = true,
        MinSize = UDim2.new(0, 400, 0, 400),
        MaxSize = UDim2.new(0, 750, 0, 500),
    })
end)

if not success then
    error("Failed to create main UI window: " .. main)
end

-- Create Tabs and Sections
local catchingCategory = main:CreateCategory("Catching")
local catchingSection = catchingCategory:CreateSection("Magnets")

local playerCategory = main:CreateCategory("Player")
local playerSection = playerCategory:CreateSection("Settings")

local miscCategory = main:CreateCategory("Misc")
local miscSection = miscCategory:CreateSection("Ball Landing Prediction")

-- Initialize Variables
local Workspace = game:GetService("Workspace")
local magson = false
local range = 10
local delayon = false
local delay = 0.1

local FootballLandingPredictions = false
local predictionColor = Color3.fromRGB(255, 255, 255)
local eventConnection

-- Function to Handle Magnets
local function handleMagnets()
    Workspace.ChildAdded:Connect(function(child)
        if child.Name == "Football" and child:IsA("BasePart") then
            if magson then
                if delayon then
                    wait(delay)
                end
                child.Size = Vector3.new(range, range, range)
                child.CanCollide = false
            else
                child.Size = Vector3.new(0.85, 1.2, 0.85)
                child.CanCollide = true
            end
        end
    end)
end

-- Add UI Elements for Magnets
local successToggle, errToggle = pcall(function()
    catchingSection:Create("Toggle", "Magnets", function(state)
        magson = state
        handleMagnets()
    end, { default = false })
end)

if not successToggle then
    error("Failed to create Magnets toggle: " .. errToggle)
end

local successSliderRange, errSliderRange = pcall(function()
    catchingSection:Create("Slider", "Range", function(value)
        range = value
    end, { min = 1, max = 25, default = 10, increment = 1, valueName = "Range" })
end)

if not successSliderRange then
    error("Failed to create Range slider: " .. errSliderRange)
end

local successToggleDelay, errToggleDelay = pcall(function()
    catchingSection:Create("Toggle", "Magnets Delay", function(state)
        delayon = state
    end, { default = false })
end)

if not successToggleDelay then
    error("Failed to create Magnets Delay toggle: " .. errToggleDelay)
end

local successSliderDelay, errSliderDelay = pcall(function()
    catchingSection:Create("Slider", "Delay", function(value)
        delay = value
    end, { min = 0, max = 1, default = 0.1, increment = 0.1, valueName = "Delay" })
end)

if not successSliderDelay then
    error("Failed to create Delay slider: " .. errSliderDelay)
end

-- Add UI Elements for Player Settings
local successToggleJump, errToggleJump = pcall(function()
    playerSection:Create("Toggle", "JumpPower", function(state)
        local player = game.Players.LocalPlayer
        local character = player.Character
        if character then
            local humanoid = character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                humanoid.JumpPower = state and 50 or 0
            end
        end
    end, { default = false })
end)

if not successToggleJump then
    error("Failed to create JumpPower toggle: " .. errToggleJump)
end

local successSliderJump, errSliderJump = pcall(function()
    playerSection:Create("Slider", "JumpPower", function(value)
        local player = game.Players.LocalPlayer
        local character = player.Character
        if character then
            local humanoid = character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                humanoid.JumpPower = value
            end
        end
    end, { min = 50, max = 60, default = 50, increment = 1, valueName = "JumpPower" })
end)

if not successSliderJump then
    error("Failed to create JumpPower slider: " .. errSliderJump)
end

local successToggleWalk, errToggleWalk = pcall(function()
    playerSection:Create("Toggle", "WalkSpeed", function(state)
        local player = game.Players.LocalPlayer
        local character = player.Character
        if character then
            local humanoid = character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                humanoid.WalkSpeed = state and 20 or 0
            end
        end
    end, { default = false })
end)

if not successToggleWalk then
    error("Failed to create WalkSpeed toggle: " .. errToggleWalk)
end

local successSliderWalk, errSliderWalk = pcall(function()
    playerSection:Create("Slider", "WalkSpeed", function(value)
        local player = game.Players.LocalPlayer
        local character = player.Character
        if character then
            local humanoid = character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                humanoid.WalkSpeed = value
            end
        end
    end, { min = 20, max = 23, default = 20, increment = 1, valueName = "WalkSpeed" })
end)

if not successSliderWalk then
    error("Failed to create WalkSpeed slider: " .. errSliderWalk)
end

-- Function for Beam Projectile Calculation
local function beamProjectile(g, v0, x0, t1)
    local c = 0.5 * 0.5 * 0.5
    local p3 = 0.5 * g * t1 * t1 + v0 * t1 + x0
    local p2 = p3 - (g * t1 * t1 + v0 * t1) / 3
    local p1 = (c * g * t1 * t1 + 0.5 * v0 * t1 + x0 - c * (x0 + p3)) / (3 * c) - p2

    local curve0 = (p1 - x0).magnitude
    local curve1 = (p2 - p3).magnitude

    local b = (x0 - p3).unit
    local r1 = (p1 - x0).unit
    local u1 = r1:Cross(b).unit
    local r2 = (p2 - p3).unit
    local u2 = r2:Cross(b).unit
    b = u1:Cross(r1).unit

    local cf1 = CFrame.new(
        x0.x, x0.y, x0.z,
        r1.x, u1.x, b.x,
        r1.y, u1.y, b.y,
        r1.z, u1.z, b.z
    )

    local cf2 = CFrame.new(
        p3.x, p3.y, p3.z,
        r2.x, u2.x, b.x,
        r2.y, u2.y, b.y,
        r2.z, u2.z, b.z
    )

    return curve0, -curve1, cf1, cf2
end

-- Add UI Elements for Ball Landing Prediction
local function setupPredictionUI()
    miscSection:Create("Toggle", "Ball Landing Prediction", function(state)
        FootballLandingPredictions = state
        if FootballLandingPredictions then
            if eventConnection then
                eventConnection:Disconnect()
            end

            eventConnection = workspace.ChildAdded:Connect(function(b)
                if b.Name == "Football" and b:IsA("BasePart") then
                    task.wait()
                    local vel = b.Velocity
                    local pos = b.Position
                    local c0, c1, cf1, cf2 = beamProjectile(Vector3.new(0, -28, 0), vel, pos, 10)
                    local beam = Instance.new("Beam")
                    local a0 = Instance.new("Attachment")
                    local a1 = Instance.new("Attachment")
                    beam.Color = ColorSequence.new(predictionColor)
                    beam.Transparency = NumberSequence.new(0, 0)
                    beam.CurveSize0 = c0
                    beam.CurveSize1 = c1
                    beam.Name = "Hitbox"
                    beam.Parent = workspace.Terrain
                    beam.Transparency = NumberSequence.new({
                        NumberSequenceKeypoint.new(0, 1),
                        NumberSequenceKeypoint.new(0.01, 0),
                        NumberSequenceKeypoint.new(1, 0),
                        NumberSequenceKeypoint.new(1, 0.01),
                    })
                    beam.Segments = 1750
                    a0.Parent = workspace.Terrain
                    a1.Parent = workspace.Terrain
                    a0.CFrame = a0.Parent.CFrame:Inverse() * cf1
                    a1.CFrame = a1.Parent.CFrame:Inverse() * cf2
                    beam.Attachment0 = a0
                    beam.Attachment1 = a1
                    beam.Width0 = 1
                    beam.Width1 = 1
                end
            end)
        elseif not FootballLandingPredictions then
            if eventConnection then
                eventConnection:Disconnect()
            end
        end
    end, { default = false })

    miscSection:Create("ColorPicker", "Prediction Color", function(color)
        predictionColor = color
    end, { default = predictionColor })
end

local successPrediction, errPrediction = pcall(setupPredictionUI)

if not successPrediction then
    error("Failed to create Ball Landing Prediction UI: " .. errPrediction)
end
