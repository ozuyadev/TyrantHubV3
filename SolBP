local function disableAntiCheat()
    local AntiCheat = game:GetService("ReplicatedStorage"):FindFirstChild("AntiCheat") 
    if AntiCheat then
        AntiCheat:Destroy()
    end
end

local function spoofActions()
    local Player = game.Players.LocalPlayer
    local mt = getrawmetatable(game)
    local old = mt.__index
    setreadonly(mt, false)
    
    mt.__index = newcclosure(function(self, key)
        if tostring(self) == "Humanoid" and (key == "WalkSpeed" or key == "JumpPower") then
            return old(self, key)
        end
        return old(self, key)
    end)
    
    setreadonly(mt, true)
end

local function bypassServerChecks()
    local originalNamecall
    originalNamecall = hookmetamethod(game, "__namecall", function(self, ...)
        local method = getnamecallmethod()
        local args = {...}

        if tostring(self) == "RemoteFunction" or tostring(self) == "RemoteEvent" then
            if method == "FireServer" then
                -- Modify or block the data here before sending to server
            end
        end

        return originalNamecall(self, unpack(args))
    end)
end

local function initializeBypass()
    disableAntiCheat()
    spoofActions()
    bypassServerChecks()
end

initializeBypass()

-- UI Library and Script Code
local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/teppyboy/RbxScripts/master/Misc/UI_Libraries/Zypher/Library.lua"))()

local main = library:CreateMain({
    projName = "Tyrant Hub",
    Resizable = true,
    MinSize = UDim2.new(0, 400, 0, 400),
    MaxSize = UDim2.new(0, 750, 0, 500),
})

local catchingCategory = main:CreateCategory("Catching")
local playerCategory = main:CreateCategory("Player")
local miscCategory = main:CreateCategory("Misc")

local catchingSection = catchingCategory:CreateSection("Catching Features")

local magnetEnabled = false
local magnetActivated = false
local autoCatchEnabled = false
local magnetSize = 10
local autoCatchRadius = 10
local showHitboxEnabled = false
local hitbox

catchingSection:Create(
    "Toggle",
    "Magnets",
    function(state)
        magnetEnabled = state
    end,
    {
        default = false
    }
)

catchingSection:Create(
    "Slider",
    "Magnet Size",
    function(value)
        magnetSize = value
    end,
    {
        min = 1,
        max = 35,
        default = 10
    }
)

catchingSection:Create(
    "Toggle",
    "Auto-Catch",
    function(state)
        autoCatchEnabled = state
        if autoCatchEnabled then
            autoCatch()
        end
    end,
    {
        default = false
    }
)

catchingSection:Create(
    "Slider",
    "Auto-Catch Radius",
    function(value)
        autoCatchRadius = value
    end,
    {
        min = 1,
        max = 15,
        default = 10
    }
)

catchingSection:Create(
    "Toggle",
    "Show Hitbox",
    function(state)
        showHitboxEnabled = state
        if hitbox then
            hitbox:Destroy()
            hitbox = nil
        end

        if showHitboxEnabled then
            local function updateHitbox()
                local ball = workspace:FindFirstChild("Football")
                if ball then
                    if not hitbox then
                        hitbox = Instance.new("Part")
                        hitbox.Size = Vector3.new(magnetSize * 1.5, magnetSize * 1.5, magnetSize * 1.5)
                        hitbox.Transparency = 0.5
                        hitbox.Anchored = true
                        hitbox.CanCollide = false
                        hitbox.Parent = workspace
                    end
                    hitbox.CFrame = ball.CFrame
                end
            end

            game:GetService("RunService").Stepped:Connect(function()
                if showHitboxEnabled then
                    updateHitbox()
                end
            end)
        end
    end,
    {
        default = false
    }
)

local playerSection = playerCategory:CreateSection("Player Features")

local walkspeedEnabled = false
local jumpPowerEnabled = false
local walkspeedValue = 20
local jumpPowerValue = 50

playerSection:Create(
    "Toggle",
    "Walkspeed",
    function(state)
        walkspeedEnabled = state
        local humanoid = game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            if state then
                humanoid.WalkSpeed = walkspeedValue
            else
                humanoid.WalkSpeed = 16
            end
        end
    end,
    {
        default = false
    }
)

playerSection:Create(
    "Slider",
    "Walkspeed Value",
    function(value)
        walkspeedValue = value
        local humanoid = game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
        if walkspeedEnabled and humanoid then
            humanoid.WalkSpeed = walkspeedValue
        end
    end,
    {
        min = 20,
        max = 23,
        default = 20
    }
)

playerSection:Create(
    "Toggle",
    "JumpPower",
    function(state)
        jumpPowerEnabled = state
        local humanoid = game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            if state then
                humanoid.JumpPower = jumpPowerValue
            else
                humanoid.JumpPower = 50
            end
        end
    end,
    {
        default = false
    }
)

playerSection:Create(
    "Slider",
    "JumpPower Value",
    function(value)
        jumpPowerValue = value
        local humanoid = game.Players.LocalPlayer.Character and game.Players.LocalPlayer:FindFirstChildOfClass("Humanoid")
        if jumpPowerEnabled and humanoid then
            humanoid.JumpPower = jumpPowerValue
        end
    end,
    {
        min = 50,
        max = 60,
        default = 50
    }
)

local miscSection = miscCategory:CreateSection("Misc Features")

local ballLandingPredictionEnabled = false
local predictionColor = Color3.fromRGB(255, 255, 255)

local function beamProjectile(g, v0, x0, t1)
    local c = 0.5 * 0.5 * 0.5
    local p3 = 0.5 * g * t1 * t1 + v0 * t1 + x0
    local p2 = p3 - (g * t1 * t1 + v0 * t1) / 3
    local p1 = (c * g * t1 * t1 + 0.5 * v0 * t1 + x0 - c * (x0 + p3)) / (3 * c) - p2

    local curve0 = (p1 - x0).magnitude
    local curve1 = (p2 - p3).magnitude

    local b = (x0 - p3).unit
    local r1 = (p1 - x0).unit
    local u1 = r1:Cross(b).unit
    local r2 = (p2 - p3).unit
    local u2 = r2:Cross(b).unit
    b = u1:Cross(r1).unit

    local cf1 = CFrame.new(
        x0.x, x0.y, x0.z,
        r1.x, u1.x, b.x,
        r1.y, u1.y, b.y,
        r1.z, u1.z, b.z
    )

    local cf2 = CFrame.new(
        p3.x, p3.y, p3.z,
        r2.x, u2.x, b.x,
        r2.y, u2.y, b.y,
        r2.z, u2.z, b.z
    )

    return curve0, curve1, cf1, cf2
end

miscSection:Create(
    "Toggle",
    "Ball Landing Prediction",
    function(state)
        ballLandingPredictionEnabled = state

        if ballLandingPredictionEnabled then
            local function predictLanding()
                local ball = workspace:FindFirstChild("Football")
                if ball then
                    local g = Vector3.new(0, -workspace.Gravity, 0)
                    local v0 = ball.AssemblyLinearVelocity
                    local x0 = ball.Position
                    local t1 = (2 * v0.y / -g.y)

                    local curve0, curve1, cf1, cf2 = beamProjectile(g, v0, x0, t1)

                    local part = Instance.new("Part")
                    part.Size = Vector3.new(0.2, curve0, 0.2)
                    part.CFrame = cf1
                    part.Color = predictionColor
                    part.Anchored = true
                    part.CanCollide = false
                    part.Parent = workspace

                    local part2 = Instance.new("Part")
                    part2.Size = Vector3.new(0.2, curve1, 0.2)
                    part2.CFrame = cf2
                    part2.Color = predictionColor
                    part2.Anchored = true
                    part2.CanCollide = false
                    part2.Parent = workspace

                    game:GetService("Debris"):AddItem(part, 0.1)
                    game:GetService("Debris"):AddItem(part2, 0.1)
                end
            end

            game:GetService("RunService").Stepped:Connect(function()
                if ballLandingPredictionEnabled then
                    predictLanding()
                end
            end)
        end
    end,
    {
        default = false
    }
)

miscSection:Create(
    "ColorPicker",
    "Prediction Line Color",
    function(value)
        predictionColor = value
    end,
    {
        default = Color3.fromRGB(255, 255, 255)
    }
)

print("Tyrant Hub loaded successfully!")
